/*
 * File: mysensors.h
 * Denis Zheleznyakov aka ZiB @ http://ziblog.ru
 */

#ifndef MYSENSORS_H_
#define MYSENSORS_H_

enum mysensors_settings
{
	MYSENSORS_DEVICE_ADDRESS = 30, // адрес устройства
	MYSENSORS_BROADCAST_ADDRESS = 255, // широковещательный адрес
	MYSENSORS_GATE_ADDRESS = 0, // адрес шлюза
	MYSENSORS_PACKET_HEADER_SIZE = 7, // размер заголовка
	MYSENSORS_MAX_PACKET_SIZE = 32, // максимальный размер пакета
	MYSENSORS_PACKET_PAYLOAD_SIZE = (MYSENSORS_MAX_PACKET_SIZE - MYSENSORS_PACKET_HEADER_SIZE), // размер заголовка
	MYSENSORS_
};

enum mysensors_command
{
	MYSENSORS_C_PRESENTATION = 0, //!< Sent by a node when they present attached sensors. This is usually done in presentation() at startup.
	MYSENSORS_C_SET = 1, //!< This message is sent from or to a sensor when a sensor value should be updated.
	MYSENSORS_C_REQ = 2, //!< Requests a variable value (usually from an actuator destined for controller).
	MYSENSORS_C_INTERNAL = 3, //!< Internal MySensors messages (also include common messages provided/generated by the library).
	MYSENSORS_C_STREAM = 4, //!< For firmware and other larger chunks of data that need to be divided into pieces.
	MYSENSORS_C_RESERVED_5 = 5, //!< C_RESERVED_5
	MYSENSORS_C_RESERVED_6 = 6, //!< C_RESERVED_6
	MYSENSORS_C_INVALID_7 = 7, //!< C_INVALID_7
	MYSENSORS_C_
};

enum mysensors_sensor
{
	MYSENSORS_S_DOOR = 0, //!< Door sensor, V_TRIPPED, V_ARMED
	MYSENSORS_S_MOTION = 1, //!< Motion sensor, V_TRIPPED, V_ARMED
	MYSENSORS_S_SMOKE = 2, //!< Smoke sensor, V_TRIPPED, V_ARMED
	MYSENSORS_S_BINARY = 3, //!< Binary light or relay, V_STATUS, V_WATT
	MYSENSORS_S_LIGHT = 3, //!< \deprecated Same as MYSENSORS_S_BINARY
	MYSENSORS_S_DIMMER = 4, //!< Dimmable light or fan device, V_STATUS (on/off), V_PERCENTAGE (dimmer level 0-100), V_WATT
	MYSENSORS_S_COVER = 5, //!< Blinds or window cover, V_UP, V_DOWN, V_STOP, V_PERCENTAGE (open/close to a percentage)
	MYSENSORS_S_TEMP = 6, //!< Temperature sensor, V_TEMP
	MYSENSORS_S_HUM = 7, //!< Humidity sensor, V_HUM
	MYSENSORS_S_BARO = 8, //!< Barometer sensor, V_PRESSURE, V_FORECAST
	MYSENSORS_S_WIND = 9, //!< Wind sensor, V_WIND, V_GUST
	MYSENSORS_S_RAIN = 10, //!< Rain sensor, V_RAIN, V_RAINRATE
	MYSENSORS_S_UV = 11, //!< Uv sensor, V_UV
	MYSENSORS_S_WEIGHT = 12, //!< Personal scale sensor, V_WEIGHT, V_IMPEDANCE
	MYSENSORS_S_POWER = 13, //!< Power meter, V_WATT, V_KWH, V_VAR, V_VA, V_POWER_FACTOR
	MYSENSORS_S_HEATER = 14, //!< Header device, V_HVAC_SETPOINT_HEAT, V_HVAC_FLOW_STATE, V_TEMP
	MYSENSORS_S_DISTANCE = 15, //!< Distance sensor, V_DISTANCE
	MYSENSORS_S_LIGHT_LEVEL = 16, //!< Light level sensor, V_LIGHT_LEVEL (uncalibrated in percentage),  V_LEVEL (light level in lux)
	MYSENSORS_S_ARDUINO_NODE = 17, //!< Used (internally) for presenting a non-repeating Arduino node
	MYSENSORS_S_ARDUINO_REPEATER_NODE = 18, //!< Used (internally) for presenting a repeating Arduino node
	MYSENSORS_S_LOCK = 19, //!< Lock device, V_LOCK_STATUS
	MYSENSORS_S_IR = 20, //!< IR device, V_IR_SEND, V_IR_RECEIVE
	MYSENSORS_S_WATER = 21, //!< Water meter, V_FLOW, V_VOLUME
	MYSENSORS_S_AIR_QUALITY = 22, //!< Air quality sensor, V_LEVEL
	MYSENSORS_S_CUSTOM = 23, //!< Custom sensor
	MYSENSORS_S_DUST = 24, //!< Dust sensor, V_LEVEL
	MYSENSORS_S_SCENE_CONTROLLER = 25, //!< Scene controller device, V_SCENE_ON, V_SCENE_OFF.
	MYSENSORS_S_RGB_LIGHT = 26, //!< RGB light. Send color component data using V_RGB. Also supports V_WATT
	MYSENSORS_S_RGBW_LIGHT = 27, //!< RGB light with an additional White component. Send data using V_RGBW. Also supports V_WATT
	MYSENSORS_S_COLOR_SENSOR = 28, //!< Color sensor, send color information using V_RGB
	MYSENSORS_S_HVAC = 29, //!< Thermostat/HVAC device. V_HVAC_SETPOINT_HEAT, V_HVAC_SETPOINT_COLD, V_HVAC_FLOW_STATE, V_HVAC_FLOW_MODE, V_TEMP
	MYSENSORS_S_MULTIMETER = 30, //!< Multimeter device, V_VOLTAGE, V_CURRENT, V_IMPEDANCE
	MYSENSORS_S_SPRINKLER = 31, //!< Sprinkler, V_STATUS (turn on/off), V_TRIPPED (if fire detecting device)
	MYSENSORS_S_WATER_LEAK = 32, //!< Water leak sensor, V_TRIPPED, V_ARMED
	MYSENSORS_S_SOUND = 33, //!< Sound sensor, V_TRIPPED, V_ARMED, V_LEVEL (sound level in dB)
	MYSENSORS_S_VIBRATION = 34, //!< Vibration sensor, V_TRIPPED, V_ARMED, V_LEVEL (vibration in Hz)
	MYSENSORS_S_MOISTURE = 35, //!< Moisture sensor, V_TRIPPED, V_ARMED, V_LEVEL (water content or moisture in percentage?)
	MYSENSORS_S_INFO = 36, //!< LCD text device / Simple information device on controller, V_TEXT
	MYSENSORS_S_GAS = 37, //!< Gas meter, V_FLOW, V_VOLUME
	MYSENSORS_S_GPS = 38, //!< GPS Sensor, V_POSITION
	MYSENSORS_S_WATER_QUALITY = 39, //!< V_TEMP, V_PH, V_ORP, V_EC, V_STATUS
	MYSENSORS_S_
};

enum mysensors_data
{
	MYSENSORS_V_TEMP = 0, //!< S_TEMP. Temperature S_TEMP, S_HEATER, S_HVAC
	MYSENSORS_V_HUM = 1, //!< S_HUM. Humidity
	MYSENSORS_V_STATUS = 2, //!< S_BINARY, S_DIMMER, S_SPRINKLER, S_HVAC, S_HEATER. Used for setting/reporting binary (on/off) status. 1=on, 0=off
	MYSENSORS_V_LIGHT = 2, //!< \deprecated Same as MYSENSORS_V_STATUS
	MYSENSORS_V_PERCENTAGE = 3, //!< S_DIMMER. Used for sending a percentage value 0-100 (%).
	MYSENSORS_V_DIMMER = 3, //!< \deprecated Same as MYSENSORS_V_PERCENTAGE
	MYSENSORS_V_PRESSURE = 4, //!< S_BARO. Atmospheric Pressure
	MYSENSORS_V_FORECAST = 5, //!< S_BARO. Whether forecast. string of "stable", "sunny", "cloudy", "unstable", "thunderstorm" or "unknown"
	MYSENSORS_V_RAIN = 6, //!< S_RAIN. Amount of rain
	MYSENSORS_V_RAINRATE = 7, //!< S_RAIN. Rate of rain
	MYSENSORS_V_WIND = 8, //!< S_WIND. Wind speed
	MYSENSORS_V_GUST = 9, //!< S_WIND. Gust
	MYSENSORS_V_DIRECTION = 10, //!< S_WIND. Wind direction 0-360 (degrees)
	MYSENSORS_V_UV = 11, //!< S_UV. UV light level
	MYSENSORS_V_WEIGHT = 12, //!< S_WEIGHT. Weight(for scales etc)
	MYSENSORS_V_DISTANCE = 13, //!< S_DISTANCE. Distance
	MYSENSORS_V_IMPEDANCE = 14, //!< S_MULTIMETER, S_WEIGHT. Impedance value
	MYSENSORS_V_ARMED = 15, //!< S_DOOR, S_MOTION, S_SMOKE, S_SPRINKLER. Armed status of a security sensor. 1 = Armed, 0 = Bypassed
	MYSENSORS_V_TRIPPED = 16, //!< S_DOOR, S_MOTION, S_SMOKE, S_SPRINKLER, S_WATER_LEAK, S_SOUND, S_VIBRATION, S_MOISTURE. Tripped status of a security sensor. 1 = Tripped, 0
	MYSENSORS_V_WATT = 17, //!< S_POWER, S_BINARY, S_DIMMER, S_RGB_LIGHT, S_RGBW_LIGHT. Watt value for power meters
	MYSENSORS_V_KWH = 18, //!< S_POWER. Accumulated number of KWH for a power meter
	MYSENSORS_V_SCENE_ON = 19, //!< S_SCENE_CONTROLLER. Turn on a scene
	MYSENSORS_V_SCENE_OFF = 20, //!< S_SCENE_CONTROLLER. Turn of a scene
	MYSENSORS_V_HVAC_FLOW_STATE = 21, //!< S_HEATER, S_HVAC. HVAC flow state ("Off", "HeatOn", "CoolOn", or "AutoChangeOver")
	MYSENSORS_V_HEATER = 21, //!< \deprecated Same as MYSENSORS_V_HVAC_FLOW_STATE
	MYSENSORS_V_HVAC_SPEED = 22, //!< S_HVAC, S_HEATER. HVAC/Heater fan speed ("Min", "Normal", "Max", "Auto")
	MYSENSORS_V_LIGHT_LEVEL = 23, //!< S_LIGHT_LEVEL. Uncalibrated light level. 0-100%. Use MYSENSORS_V_LEVEL for light level in lux
	MYSENSORS_V_VAR1 = 24, //!< VAR1
	MYSENSORS_V_VAR2 = 25, //!< VAR2
	MYSENSORS_V_VAR3 = 26, //!< VAR3
	MYSENSORS_V_VAR4 = 27, //!< VAR4
	MYSENSORS_V_VAR5 = 28, //!< VAR5
	MYSENSORS_V_UP = 29, //!< S_COVER. Window covering. Up
	MYSENSORS_V_DOWN = 30, //!< S_COVER. Window covering. Down
	MYSENSORS_V_STOP = 31, //!< S_COVER. Window covering. Stop
	MYSENSORS_V_IR_SEND = 32, //!< S_IR. Send out an IR-command
	MYSENSORS_V_IR_RECEIVE = 33, //!< S_IR. This message contains a received IR-command
	MYSENSORS_V_FLOW = 34, //!< S_WATER. Flow of water (in meter)
	MYSENSORS_V_VOLUME = 35, //!< S_WATER. Water volume
	MYSENSORS_V_LOCK_STATUS = 36, //!< S_LOCK. Set or get lock status. 1=Locked, 0=Unlocked
	MYSENSORS_V_LEVEL = 37, //!< S_DUST, S_AIR_QUALITY, S_SOUND (dB), S_VIBRATION (hz), S_LIGHT_LEVEL (lux)
	MYSENSORS_V_VOLTAGE = 38, //!< S_MULTIMETER
	MYSENSORS_V_CURRENT = 39, //!< S_MULTIMETER
	MYSENSORS_V_RGB = 40, //!< S_RGB_LIGHT, S_COLOR_SENSOR. Sent as ASCII hex: RRGGBB (RR=red, GG=green, BB=blue component)
	MYSENSORS_V_RGBW = 41, //!< S_RGBW_LIGHT. Sent as ASCII hex: RRGGBBWW (WW=white component)
	MYSENSORS_V_ID = 42, //!< Used for sending in sensors hardware ids (i.e. OneWire DS1820b).
	MYSENSORS_V_UNIT_PREFIX = 43, //!< Allows sensors to send in a string representing the unit prefix to be displayed in GUI, not parsed by controller! E.g. cm, m, km, inch.
	MYSENSORS_V_HVAC_SETPOINT_COOL = 44, //!< S_HVAC. HVAC cool setpoint (Integer between 0-100)
	MYSENSORS_V_HVAC_SETPOINT_HEAT = 45, //!< S_HEATER, S_HVAC. HVAC/Heater setpoint (Integer between 0-100)
	MYSENSORS_V_HVAC_FLOW_MODE = 46, //!< S_HVAC. Flow mode for HVAC ("Auto", "ContinuousOn", "PeriodicOn")
	MYSENSORS_V_TEXT = 47, //!< S_INFO. Text message to display on LCD or controller device
	MYSENSORS_V_CUSTOM = 48, //!< Custom messages used for controller/inter node specific commands, preferably using S_CUSTOM device type.
	MYSENSORS_V_POSITION = 49, //!< GPS position and altitude. Payload: latitude;longitude;altitude(m). E.g. "55.722526;13.017972;18"
	MYSENSORS_V_IR_RECORD = 50, //!< Record IR codes S_IR for playback
	MYSENSORS_V_PH = 51, //!< S_WATER_QUALITY, water PH
	MYSENSORS_V_ORP = 52, //!< S_WATER_QUALITY, water ORP : redox potential in mV
	MYSENSORS_V_EC = 53, //!< S_WATER_QUALITY, water electric conductivity μS/cm (microSiemens/cm)
	MYSENSORS_V_VAR = 54, //!< S_POWER, Reactive power: volt-ampere reactive (var)
	MYSENSORS_V_VA = 55, //!< S_POWER, Apparent power: volt-ampere (VA)
	MYSENSORS_V_POWER_FACTOR = 56, //!< S_POWER, Ratio of real power to apparent power: floating point value in the range [-1,..,1]
	MYSENSORS_V_MULTI_MESSAGE = 57, //!< Special type, multiple sensors in one message
	MYSENSORS_V_
};

enum mysensors_internal
{
	MYSENSORS_I_BATTERY_LEVEL = 0, //!< Battery level
	MYSENSORS_I_TIME = 1, //!< Time (request/response)
	MYSENSORS_I_VERSION = 2, //!< Version
	MYSENSORS_I_ID_REQUEST = 3, //!< ID request
	MYSENSORS_I_ID_RESPONSE = 4, //!< ID response
	MYSENSORS_I_INCLUSION_MODE = 5, //!< Inclusion mode
	MYSENSORS_I_CONFIG = 6, //!< Config (request/response)
	MYSENSORS_I_FIND_PARENT_REQUEST = 7, //!< Find parent
	MYSENSORS_I_FIND_PARENT_RESPONSE = 8, //!< Find parent response
	MYSENSORS_I_LOG_MESSAGE = 9, //!< Log message
	MYSENSORS_I_CHILDREN = 10, //!< Children
	MYSENSORS_I_SKETCH_NAME = 11, //!< Sketch name
	MYSENSORS_I_SKETCH_VERSION = 12, //!< Sketch version
	MYSENSORS_I_REBOOT = 13, //!< Reboot request
	MYSENSORS_I_GATEWAY_READY = 14, //!< Gateway ready
	MYSENSORS_I_SIGNING_PRESENTATION = 15, //!< Provides signing related preferences (first byte is preference version)
	MYSENSORS_I_NONCE_REQUEST = 16, //!< Request for a nonce
	MYSENSORS_I_NONCE_RESPONSE = 17, //!< Payload is nonce data
	MYSENSORS_I_HEARTBEAT_REQUEST = 18, //!< Heartbeat request
	MYSENSORS_I_PRESENTATION = 19, //!< Presentation message
	MYSENSORS_I_DISCOVER_REQUEST = 20, //!< Discover request
	MYSENSORS_I_DISCOVER_RESPONSE = 21, //!< Discover response
	MYSENSORS_I_HEARTBEAT_RESPONSE = 22, //!< Heartbeat response
	MYSENSORS_I_LOCKED = 23, //!< Node is locked (reason in string-payload)
	MYSENSORS_I_PING = 24, //!< Ping sent to node, payload incremental hop counter
	MYSENSORS_I_PONG = 25, //!< In return to ping, sent back to sender, payload incremental hop counter
	MYSENSORS_I_REGISTRATION_REQUEST = 26, //!< Register request to GW
	MYSENSORS_I_REGISTRATION_RESPONSE = 27, //!< Register response from GW
	MYSENSORS_I_DEBUG = 28, //!< Debug message
	MYSENSORS_I_SIGNAL_REPORT_REQUEST = 29, //!< Device signal strength request
	MYSENSORS_I_SIGNAL_REPORT_REVERSE = 30, //!< Internal
	MYSENSORS_I_SIGNAL_REPORT_RESPONSE = 31, //!< Device signal strength response (RSSI)
	MYSENSORS_I_PRE_SLEEP_NOTIFICATION = 32, //!< Message sent before node is going to sleep
	MYSENSORS_I_POST_SLEEP_NOTIFICATION = 33, //!< Message sent after node woke up (if enabled)
	MYSENSORS_I_
};

enum mysensors_stream
{
	MYSENSORS_ST_FIRMWARE_CONFIG_REQUEST = 0, //!< Request new FW, payload contains current FW details
	MYSENSORS_ST_FIRMWARE_CONFIG_RESPONSE = 1, //!< New FW details to initiate OTA FW update
	MYSENSORS_ST_FIRMWARE_REQUEST = 2, //!< Request FW block
	MYSENSORS_ST_FIRMWARE_RESPONSE = 3, //!< Response FW block
	MYSENSORS_ST_SOUND = 4, //!< Sound
	MYSENSORS_ST_IMAGE = 5, //!< Image
	MYSENSORS_ST_FIRMWARE_CONFIRM = 6, //!< Mark running firmware as valid (MyOTAFirmwareUpdateNVM + mcuboot)
	MYSENSORS_ST_FIRMWARE_RESPONSE_RLE = 7, //!< Response FW block with run length encoded data
	MYSENSORS_ST_
};

enum mysensors_payload
{
	MYSENSORS_P_STRING = 0, //!< Payload type is string
	MYSENSORS_P_BYTE = 1, //!< Payload type is byte
	MYSENSORS_P_INT16 = 2, //!< Payload type is INT16
	MYSENSORS_P_UINT16 = 3, //!< Payload type is UINT16
	MYSENSORS_P_LONG32 = 4, //!< Payload type is INT32
	MYSENSORS_P_ULONG32 = 5, //!< Payload type is UINT32
	MYSENSORS_P_CUSTOM = 6, //!< Payload type is binary
	MYSENSORS_P_FLOAT32 = 7, //!< Payload type is float32
	MYSENSORS_P_
};

typedef struct
{
	// маршрут
	uint8_t last; // Id of last node this message passed
	uint8_t sender; // Id of sender node (origin)
	uint8_t destination; // Id of destination node

	// метаданные
	uint8_t protocol_version :2;
	uint8_t signed_flag :1;
	uint8_t payload_length :5;
	uint8_t command_type :3;
	uint8_t request_an_echo :1; // Indicator that receiver should echo the message back to the sender
	uint8_t is_echo_message :1; // Indicator that this is the echoed message
	uint8_t payload_data_type :3;

	uint8_t type; // Type varies depending on command
	uint8_t sensor; // Id of sensor that this message concerns

	union
	{
		uint8_t bValue; //!< unsigned byte value (8-bit)
		uint16_t uiValue; //!< unsigned integer value (16-bit)
		int16_t iValue; //!< signed integer value (16-bit)
		uint32_t ulValue; //!< unsigned long value (32-bit)
		int32_t lValue; //!< signed long value (32-bit)
		struct
		{
			float fValue; //!< Float messages
			uint8_t fPrecision; //!< Number of decimals when serializing
		};
		char data[MYSENSORS_PACKET_PAYLOAD_SIZE]; //!< Buffer for raw payload data
	}__attribute__((packed));
}__attribute__((__packed__)) mysensors_packet_type;

void mysensors_send(uint8_t command_type, uint8_t type, uint8_t sensor_id, uint8_t payload_data_type, uint8_t * value, uint8_t param);

#endif /* MYSENSORS_H_ */
